package com.example.demo.config;

import com.example.demo.Entity.UsersgioiEntity;
import com.example.demo.Entity.Apireponsi;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

/**
 * ‚úÖ HttpResponseUtil
 * Ti·ªán √≠ch gi√∫p t·∫°o ResponseEntity chu·∫©n REST (chu·∫©n JSON format),
 * tr√°nh vi·ªác l·∫∑p code trong c√°c Controller (ƒë·∫∑c bi·ªát l√† khi x·ª≠ l√Ω login, register, CRUD...).
 *
 * D·∫°ng ph·∫£n h·ªìi:
 * {
 *   "status": 200,
 *   "message": "Login th√†nh c√¥ng",
 *   "data": {...},
 *   "error": null
 * }
 */
@Component
public class HttpResponseUtil {

    /**
     * ‚úÖ Tr·∫£ v·ªÅ 200 OK (th√†nh c√¥ng)
     */
    public <T> ResponseEntity<Apireponsi<T>> ok(String message) {
        return buildResponse(HttpStatus.OK, message, null, null);
    }

    /**
     * ‚úÖ Tr·∫£ v·ªÅ 200 OK k√®m data
     */
    public <T> ResponseEntity<Apireponsi<T>> ok(String message, T data) {
        return buildResponse(HttpStatus.OK, message, data, null);
    }

    /**
     * ‚úÖ Tr·∫£ v·ªÅ 201 Created (khi t·∫°o m·ªõi th√†nh c√¥ng)
     */
    public <T> ResponseEntity<Apireponsi<T>> created(String message, T data) {
        return buildResponse(HttpStatus.CREATED, message, data, null);
    }

    /**
     * ‚ö†Ô∏è Tr·∫£ v·ªÅ 409 Conflict (xung ƒë·ªôt d·ªØ li·ªáu, v√≠ d·ª•: username/email ƒë√£ t·ªìn t·∫°i)
     */
    public <T> ResponseEntity<Apireponsi<T>> conflict(String message) {
        return buildResponse(HttpStatus.CONFLICT, message, null, null);
    }

    /**
     * ‚ö†Ô∏è Tr·∫£ v·ªÅ 400 Bad Request (y√™u c·∫ßu kh√¥ng h·ª£p l·ªá)
     */
    public <T> ResponseEntity<Apireponsi<T>> badRequest(String message) {
        return buildResponse(HttpStatus.BAD_REQUEST, message, null, null);
    }
    public <T> ResponseEntity<Apireponsi<T>> okList(String message, T data) {
        return buildResponse(HttpStatus.OK, message, data, null);
    }
    /**
     * ‚ö†Ô∏è Tr·∫£ v·ªÅ 404 Not Found (kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu)
     */
    public <T> ResponseEntity<Apireponsi<T>> notFound(String message) {
        return buildResponse(HttpStatus.NOT_FOUND, message, null, null);
    }

    /**
     * ‚ö†Ô∏è Tr·∫£ v·ªÅ 401 Unauthorized (ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá)
     */
    public <T> ResponseEntity<Apireponsi<T>> unauthorized(String message) {
        return buildResponse(HttpStatus.UNAUTHORIZED, message, null, null);
    }

    /**
     * ‚ùå Tr·∫£ v·ªÅ 500 Internal Server Error (l·ªói h·ªá th·ªëng)
     */
    public <T> ResponseEntity<Apireponsi<T>> error(String message, Exception e) {
        return buildResponse(HttpStatus.INTERNAL_SERVER_ERROR, message, null, e.getMessage());
    }

    /**
     * üß© H√†m chung t·∫°o ResponseEntity
     */
    private <T> ResponseEntity<Apireponsi<T>> buildResponse(HttpStatus status, String message, T data, String error) {
        return ResponseEntity.status(status).body(new Apireponsi<>(status, message, data, error));
    }
}
